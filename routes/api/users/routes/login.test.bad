import login from './login';
import models from '../../../../models';
import * as helpers from '../helpers';

jest.mock('../../../../models');

describe('Login', async () => {
  it('returns a user object with token when credentials are valid', async () => {
    const mockRequest = {
      query: {},
      params: {},
      payload: {
        username: 'test@test.com',
        password: 'password'
      }
    };

    const h = {
      response: jest.fn().mockReturnValue({
        code: jest.fn()
      })
    };

    jest.unmock('../helpers');
    helpers.getToken = jest.fn(() => '12345');

    const userMock = {
      id: 1,
      email: 'test@test.com',
      username: 'test',
      password: '$2b$10$p4sMc14J4Mllzb4ywTI.6.ckLmtV8SEwBTVudHb7wcPZheoCSmA/.',
      firstName: 'Tester',
      lastName: 'Testerson',
      admin: null,
      token: '12345'
    };

    models.User.findOne.mockImplementationOnce(() => ({
      dataValues: {
        ...userMock
      },
      ...userMock
    }));

    await login.handler(mockRequest, h);
    expect(h.response).toHaveBeenCalledWith({
      user: {
        id: userMock.id,
        email: userMock.email,
        username: userMock.username,
        firstName: userMock.firstName,
        lastName: userMock.lastName,
        admin: userMock.admin,
        token: userMock.token
      }
    });

    // TODO: Figure out a good way of getting snapshot testing in there
    // const results = await login.handler(mockRequest, h);
    // expect(results).toMatchSnapshot();
  });

  it('returns an error when credentials are invalid', async () => {
    const mockRequest = {
      query: {},
      params: {},
      payload: {
        username: 'test@test.com',
        password: 'password'
      }
    };

    const h = {
      response: jest.fn().mockReturnValue({
        code: jest.fn()
      })
    };

    models.User.findOne.mockImplementationOnce(() => {
      return Promise.resolve(null);
    });

    // const results = await login.handler(mockRequest, h);
    await login.handler(mockRequest, h);
    expect(h.response).toHaveBeenCalledWith({
      error: 'Invalid credentials'
    });
  });
});
